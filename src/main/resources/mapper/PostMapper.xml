<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybaits.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.sisyphusj.community.app.post.mapper.PostMapper">

    <sql id="commonKeywordFilter">
        <if test="keyword != null and keyword != ''">
            <choose>
                <when test="keywordType.toString() == 'TITLE'">
                    and p.title like CONCAT('%', #{keyword}, '%')
                </when>
                <when test="keywordType.toString() == 'CONTENT'">
                    and p.content like CONCAT('%', #{keyword}, '%')
                </when>
                <when test="keywordType.toString() == 'AUTHOR'">
                    and u.name like CONCAT('%', #{keyword}, '%')
                </when>
                <when test="keywordType.toString() == 'ALL'">
                    and (p.title like CONCAT('%', #{keyword}, '%') or p.content like CONCAT('%', #{keyword}, '%') or u.name like CONCAT('%', #{keyword}, '%'))
                </when>
            </choose>
        </if>
    </sql>

    <insert id="insertPost" parameterType="me.sisyphusj.community.app.post.domain.PostVO" useGeneratedKeys="true" keyProperty="postId">
        insert into posts (user_id, title, content <if test="thumbnailId != null">, thumbnail_image_id </if>)
        values (#{userId}, #{title}, #{content} <if test="thumbnailId != null">, #{thumbnailId} </if>)
    </insert>

    <select id="selectPostSummaryList" parameterType="me.sisyphusj.community.app.post.domain.PageVO" resultType="me.sisyphusj.community.app.post.domain.PostVO">
        select p.post_id, u.name, p.title, p.views, p.created_at, p.updated_at, (select count(*) from post_likes pl where pl.post_id = p.post_id) as likes
        from posts p
        inner join user u on p.user_id = u.user_id
        <where>
            p.is_deleted = 'N' and p.thumbnail_image_id is null
            <include refid="commonKeywordFilter"/>
        </where>
        <choose>
            <when test="sortType.toString() == 'DATE'">
                order by p.created_at desc
            </when>
            <when test="sortType.toString() == 'VIEWS'">
                order by p.views desc, p.created_at desc
            </when>
            <otherwise>
                order by p.created_at desc
            </otherwise>
        </choose>
        limit #{amount} offset #{offset}
    </select>

    <select id="selectImagePostSummaryList" parameterType="me.sisyphusj.community.app.post.domain.PageVO" resultMap="PostWithThumbnail">
        select p.post_id,
               u.name,
               p.title,
               p.views,
               p.created_at,
               p.updated_at,
               (select count(*) from post_likes pl where pl.post_id = p.post_id) as likes,
                i.image_id          as thumbnail_image_id,
                i.origin_name       as thumbnail_origin_name,
                i.stored_name       as thumbnail_stored_name,
                i.size              as thumbnail_size,
                i.image_path        as thumbnail_image_path
        from posts p
        inner join user u on p.user_id = u.user_id
        inner join image i on p.thumbnail_image_id = i.image_id
        <where>
            p.is_deleted = 'N'
            <include refid="commonKeywordFilter"/>
        </where>
        <choose>
            <when test="sortType.toString() == 'DATE'">
                order by p.created_at desc
            </when>
            <when test="sortType.toString() == 'VIEWS'">
                order by p.views desc, p.created_at desc
            </when>
            <otherwise>
                order by p.created_at desc
            </otherwise>
        </choose>
        limit #{amount} offset #{offset}
    </select>

    <select id="selectPostTotalCount" parameterType="me.sisyphusj.community.app.post.domain.PageVO" resultType="int">
        select count(*)
        from posts p
        inner join user u on p.user_id = u.user_id
        <where>
            p.is_deleted = 'N'
            <include refid="commonKeywordFilter"/>
        </where>
    </select>

    <select id="selectGalleryPostTotalCount" parameterType="me.sisyphusj.community.app.post.domain.PageVO" resultType="int">
        select count(*)
        from posts p
        inner join user u on p.user_id = u.user_id
        <where>
            p.is_deleted = 'N' and p.thumbnail_image_id is not null
            <include refid="commonKeywordFilter"/>
        </where>
    </select>

    <select id="selectPostDetails" parameterType="long" resultType="me.sisyphusj.community.app.post.domain.PostVO">
        select p.post_id,
               u.user_id,
               u.name,
               title,
               content,
               views,
               created_at,
               updated_at,
               (select count(*) from post_likes pl where pl.post_id = p.post_id)                         as likes
        from posts p
                 inner join user u on p.user_id = u.user_id
        where p.post_id = #{postId}
          and is_deleted = 'N'
    </select>

    <select id="selectPostDetailsByUserId" parameterType="long" resultType="me.sisyphusj.community.app.post.domain.PostVO">
        select p.post_id,
               u.user_id,
               u.name,
               title,
               content,
               views,
               created_at,
               updated_at,
               (select count(*) from post_likes pl where pl.post_id = p.post_id)                         as likes,
               exists (select 1 from post_likes a where a.post_id = p.post_id and a.user_id = #{userId}) as hasLike
        from posts p
                 inner join user u on p.user_id = u.user_id
        where p.post_id = #{postId}
          and is_deleted = 'N'
    </select>

    <select id="selectGalleryPostDetails" parameterType="long" resultMap="PostWithThumbnail">
        select p.post_id,
               u.user_id,
               u.name,
               p.title,
               p.content,
               p.views,
               p.created_at,
               p.updated_at,
               (select count(*) from post_likes pl where pl.post_id = p.post_id)                         as likes,
               i.image_id          as thumbnail_image_id,
               i.origin_name       as thumbnail_origin_name,
               i.stored_name       as thumbnail_stored_name,
               i.size              as thumbnail_size,
               i.image_path        as thumbnail_image_path
        from posts p
                 inner join user u on p.user_id = u.user_id
                 inner join image i on p.thumbnail_image_id = i.image_id
        where p.post_id = #{postId}
          and is_deleted = 'N'
    </select>

    <select id="selectGalleryPostDetailsByUserId" parameterType="long" resultMap="PostWithThumbnail">
        select p.post_id,
               u.user_id,
               u.name,
               p.title,
               p.content,
               p.views,
               p.created_at,
               p.updated_at,
               (select count(*) from post_likes pl where pl.post_id = p.post_id)                         as likes,
               exists (select 1 from post_likes a where a.post_id = p.post_id and a.user_id = #{userId}) as hasLike,
               i.image_id          as thumbnail_image_id,
               i.origin_name       as thumbnail_origin_name,
               i.stored_name       as thumbnail_stored_name,
               i.size              as thumbnail_size,
               i.image_path        as thumbnail_image_path
        from posts p
                 inner join user u on p.user_id = u.user_id
                 inner join image i on p.thumbnail_image_id = i.image_id
        where p.post_id = #{postId}
          and is_deleted = 'N'
    </select>

    <update id="updateViewsAndGet" parameterType="long">
        update posts
        set views = views + 1
        where post_id = #{postId}
          and is_deleted = 'N'
    </update>

    <select id="selectCountPostByUserId" parameterType="long" resultType="int">
        select count(*)
        from posts
        where post_id = #{postId}
          and user_id = #{userId}
          and is_deleted = 'N'
    </select>

    <select id="selectCountPost" parameterType="long" resultType="int">
        select count(*)
        from posts
        where post_id = #{postId}
          and is_deleted = 'N'
    </select>

    <update id="updatePost" parameterType="me.sisyphusj.community.app.post.domain.PostVO">
        update posts
        set title   = #{title},
            content = #{content},
            <if test="thumbnailId != null"> thumbnail_image_id = #{thumbnailId} </if>
        where post_id = #{postId}
    </update>

    <update id="deletePost" parameterType="long">
        update posts
        set is_deleted = 'Y'
        where post_id = #{postId}
    </update>

    <delete id="deletePostImage" parameterType="long">
        delete
        from post_image
        where post_id = #{postId};
    </delete>

    <resultMap id="PostWithThumbnail" type="me.sisyphusj.community.app.post.domain.PostVO">
        <id property="postId" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="name" column="name"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="views" column="views"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="likes" column="likes"/>
        <result property="hasLike" column="has_like"/>
        <association property="thumbnail" javaType="me.sisyphusj.community.app.image.domain.ImageVO">
            <id property="imageId" column="thumbnail_image_id"/>
            <result property="originName" column="thumbnail_origin_name"/>
            <result property="storedName" column="thumbnail_stored_name"/>
            <result property="size" column="thumbnail_size"/>
            <result property="imagePath" column="thumbnail_image_path"/>
        </association>
    </resultMap>

</mapper>